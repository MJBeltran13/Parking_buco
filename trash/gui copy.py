# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(
    r"C:\Users\USER\Documents\GitHub\Parking_buco\Dashboard\build\assets\frame0"
)


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("862x471")
window.configure(bg="#FFFFFF")


canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=471,
    width=862,
    bd=0,
    highlightthickness=0,
    relief="ridge",
)

canvas.place(x=0, y=0)
image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(431.0, 235.0, image=image_image_1)

image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(317.0, 73.0, image=image_image_2)

image_image_3 = PhotoImage(file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(317.0, 114.0, image=image_image_3)

image_image_4 = PhotoImage(file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(317.0, 155.0, image=image_image_4)

image_image_5 = PhotoImage(file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(317.0, 192.0, image=image_image_5)

image_image_6 = PhotoImage(file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(317.0, 230.0, image=image_image_6)

image_image_7 = PhotoImage(file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(317.0, 271.0, image=image_image_7)

image_image_8 = PhotoImage(file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(317.0, 312.0, image=image_image_8)

image_image_9 = PhotoImage(file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(317.0, 349.0, image=image_image_9)

image_image_10 = PhotoImage(file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(317.0, 390.0, image=image_image_10)

image_image_11 = PhotoImage(file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(317.0, 427.0, image=image_image_11)

image_image_12 = PhotoImage(file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(540.0, 32.99999999999999, image=image_image_12)

image_image_13 = PhotoImage(file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(540.0, 74.0, image=image_image_13)

image_image_14 = PhotoImage(file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(540.0, 115.0, image=image_image_14)

image_image_15 = PhotoImage(file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(540.0, 152.0, image=image_image_15)

image_image_16 = PhotoImage(file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(540.0, 190.0, image=image_image_16)

image_image_17 = PhotoImage(file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(540.0, 231.0, image=image_image_17)

image_image_18 = PhotoImage(file=relative_to_assets("image_18.png"))
image_18 = canvas.create_image(540.0, 272.0, image=image_image_18)

image_image_19 = PhotoImage(file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(540.0, 309.0, image=image_image_19)

# image_image_20 = PhotoImage(
#     file=relative_to_assets("image_20.png"))
# image_20 = canvas.create_image(
#     540.0,
#     350.0,
#     image=image_image_20
# )

# image_image_21 = PhotoImage(
#     file=relative_to_assets("image_21.png"))
# image_21 = canvas.create_image(
#     540.0,
#     387.0,
#     image=image_image_21
# )

image_image_22 = PhotoImage(file=relative_to_assets("image_22.png"))
image_22 = canvas.create_image(540.0, 428.0, image=image_image_22)

ppm = canvas.create_text(
    712.0,
    193.0,
    anchor="nw",
    text="Initial Text 1",
    fill="#FCFCFC",
    font=("RobotoRoman Black", 24 * -1),
)

ave = canvas.create_text(
    712.0,
    352.0,
    anchor="nw",
    text="Initial Text 2",
    fill="#FCFCFC",
    font=("RobotoRoman Black", 24 * -1),
)

condition = canvas.create_text(
    726.0,
    297.0,
    anchor="center",
    text="Initial Text 3",
    fill="#FCFCFC",
    font=("RobotoRoman Black", 24 * -1),
)


# All defs
def update_canvas_text():
    # Your logic to update canvas text goes here
    # For example, you can update text based on some condition
    # Here, I'm just updating the text to "23", "14", and "Safe" respectively
    canvas.itemconfig(ppm, text="23")
    canvas.itemconfig(ave, text="13")
    canvas.itemconfig(condition, text="unsafe")
    # Schedule the next update after 5 seconds
    print("updating")
    window.after(5000, update_canvas_text)


# Void Loop
update_canvas_text()

window.resizable(False, False)
window.mainloop()
