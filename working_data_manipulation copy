from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime
import json
import time

Base = declarative_base()

class Sample(Base):
    __tablename__ = 'samples'

    id = Column(Integer, primary_key=True)
    data = Column(String)
    date_added = Column(DateTime, default=datetime.now)

engine = create_engine('sqlite:///sample.db', echo=True)
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

def insert_data_into_db(data):
    # Default array
    default_array = sample_array = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 9, 3, "safe"]

    # Overwrite values for car1, car2, indicator, co2, and average
    default_array[19] = 1  # car1
    default_array[20] = 1  # car2
    default_array[37] = 0  # indicator for car 1 and 2
    default_array[42] = 9  # co2
    default_array[43] = 32  # average

    # Additional logic to set the value of 'safe' or 'unsafe' based on CO2 level
    default_array[44] = "unsafe" if default_array[42] > 10 else "safe"

    # If new data is provided, overwrite the corresponding values
    if data:
        default_array = data

    sample = Sample(data=json.dumps(default_array))
    session.add(sample)
    session.commit()

# Function to continuously insert data into the database every 10 seconds
def insert_data_continuously():
    while True:
        insert_data_into_db([])
        time.sleep(10)

# Start the continuous insertion process
insert_data_continuously()
